
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import luban.AbstractBean;


public final class GuideCard extends AbstractBean {
    public static final int __ID__ = -72979444;
    /**
     * 这是id
     */
    public final int id;
    /**
     * 完成牌堆，长度是4的列表。代表黑红梅方。填尾牌，例如13,1,0,0黑桃牌堆已经完成，红桃上去一张A，其他是空
     */
    public final java.util.ArrayList<Integer> finishPile;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile1;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile2;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile3;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile4;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile5;
    /**
     * 接龙牌堆<br/>首尾两张牌就行
     */
    public final java.util.ArrayList<Integer> sortPile6;
    /**
     * 已翻开牌堆<br/>需要完整的牌堆牌
     */
    public final java.util.ArrayList<Integer> front1;
    /**
     * 已翻开牌堆<br/>需要完整的牌堆牌
     */
    public final java.util.ArrayList<Integer> front2;
    /**
     * 已翻开牌堆<br/>需要完整的牌堆牌
     */
    public final java.util.ArrayList<Integer> front3;
    /**
     * 未翻牌<br/>如果需要控制牌的顺序，就填写。不需要就会打乱按发牌规则发
     */
    public final java.util.ArrayList<Integer> backPile;
    public GuideCard(JsonObject _buf) {
        id = _buf.get("id").getAsInt();
        {
            com.google.gson.JsonArray _json0_ = _buf.get("finishPile").getAsJsonArray();
            finishPile = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                finishPile.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile1").getAsJsonArray();
            sortPile1 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile1.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile2").getAsJsonArray();
            sortPile2 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile2.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile3").getAsJsonArray();
            sortPile3 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile3.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile4").getAsJsonArray();
            sortPile4 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile4.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile5").getAsJsonArray();
            sortPile5 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile5.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("sortPile6").getAsJsonArray();
            sortPile6 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                sortPile6.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("front1").getAsJsonArray();
            front1 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                front1.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("front2").getAsJsonArray();
            front2 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                front2.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("front3").getAsJsonArray();
            front3 = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                front3.add(_v0);
            }
        }
        {
            com.google.gson.JsonArray _json0_ = _buf.get("backPile").getAsJsonArray();
            backPile = new java.util.ArrayList<Integer>(_json0_.size());
            for (JsonElement _e0 : _json0_) {
                int _v0;
                _v0 = _e0.getAsInt();
                backPile.add(_v0);
            }
        }
    }

    public static GuideCard deserialize(JsonObject _buf) {
        return new GuideCard(_buf);
    }

    @Override
    public int getTypeId() {
        return __ID__;
    }

    @Override
    public String toString() {
        return "{ "
                + "(format_field_name __code_style field.name):" + id + ","
                + "(format_field_name __code_style field.name):" + finishPile + ","
                + "(format_field_name __code_style field.name):" + sortPile1 + ","
                + "(format_field_name __code_style field.name):" + sortPile2 + ","
                + "(format_field_name __code_style field.name):" + sortPile3 + ","
                + "(format_field_name __code_style field.name):" + sortPile4 + ","
                + "(format_field_name __code_style field.name):" + sortPile5 + ","
                + "(format_field_name __code_style field.name):" + sortPile6 + ","
                + "(format_field_name __code_style field.name):" + front1 + ","
                + "(format_field_name __code_style field.name):" + front2 + ","
                + "(format_field_name __code_style field.name):" + front3 + ","
                + "(format_field_name __code_style field.name):" + backPile + ","
                + "}";
    }
}

